fns:
 dyadic  monadic
+   add; identity (no complex numbers)
-   sub; negate / swap case
×   mul; sign / case (i.e. ×'Hi ' → 1 ¯1 0) / ×|map
÷   div; 1÷⍵
*   pow; e*⍵
⍟   log; e⍟⍵
√  root; 2√⍵
⌈   max; ceil / uppercase
⌊   min; floor / lowercase
|   mod; abs / map size
∧   lcm; lcm (aka every; all truthy)
∨   gcd; gcd (aka some; contains truthy)
⍲  nand; not all / contains falsy
⍱   nor; none / all falsy
⊥  from; 2⊥⍵
⊤    to; 2⊤⍵
○  trig; pi×⍵
!   nCk; factorial

  monadic  dyadic
∊      in; enlist
⍷     NYI; find
⌷       ⊢; index; also values of map
⍳ indexes; where
~ without; negate
⍸   where; NYI; where > 0 (positions replicated n times)
⍴   shape; reshape
,   ravel; concat
⍮      ,⊂; {⍺⍵}
≢  not eq; tally (⊃1,⍨⍴⍵)
≡   depth; equal; depth is amount of ⊃s needed to get to a primitive (to be changed)
⊢       ⍵; ⍵
⊣       ⍵; ⍺ (monadic to be changed)
↑   merge; take; merge as in merge dimensions
↓   split; drop; split off last dimension as arrays
?    rand; NYI
⍪   table; vertical concat;
⊖    flip; vertical rotate
⌽ reverse; horizontal rotate
…     NYI; range
⍕  format; NYI
⍎    eval; NYI
⌿  expand; replicate
∪  unique; union
∩     NYI; intersection
⊂ enclose; split
⊃   first; pick
%     NYI; merge - 1 2 2 3%4↑¨⎕a⎕l⎕d → 'Abc3'
⍋ grade up  ; NYI
⍒ grade down; NYI
⊇ first if enclosed; select
⍉ transpose; NYI
⍧ is first; count
          

< lt; sort asc
≤ le; NYI
= eq; NYI
≥ ge; NYI
> gt; sort desc
≠ ne; NYI
  
monadic ops:

/  reduce
\  scan
¨  for each
⍨  selfie; commute
⌾  table (aka ∘.⍺⍺; _might_ get removed at some point?)
⌸  key; group ⍺ by ⍵; get/set map keys (e.g. 'x'(map⌸)5; map⌸'x')
ᐵ  each-left (A fᐵ B ≡ A f¨ ⊂B)
ᑈ  each-right (A fᑈ B ≡ (⊂A) f¨ B)

dyadic ops

∘  compose (←→ {⍶ ⍹ ⍵} or {⍺ ⍶ ⍹ ⍵})
⍛  left-compose (←→ {(⍶ ⍺) ⍹ ⍵})
.  NYI (well, ←→ {⍶/ ⍺ ⍹ ⍵})
⍣  repeat
⍡  cumulative repeat
⍥  over (←→ {(⍹⍺) ⍶ ⍹⍵} )
⍤  atop (←→ {⍺⍺ ⍺ ⍵⍵ ⍵} )
⍢  under (←→ {⍺←{_←⍺⍺⋄⍵}⋄(⍹⍣¯1) (⍹⍺) ⍶ ⍹⍵}; also structural inverse )
⍫  obverse - define inverse: ⍶ - regular function, ⍹ - inverse
@  at; right op = indices or function giving boolean array, left op = replacement array or function
⍁  for each diagonal

nilads:

⍬  0⍴0
⎕  console (println; exec input line)
⍞  console (print  ; input as string)
⍺  left arg
⍵  right arg
⍶  left operand
⍹  right operand
∇  this function

dfns:
{A ⋄ B} → B (also executing A)
{C:A ⋄ B} → B (also executing A if C was true)
{C:←A ⋄ B} → A if C, else B